def main():
    import os, sys, re, json
    prog = sys.argv[0]
    srcDir = os.path.normpath(os.path.abspath(sys.argv[1]))
    here = os.path.dirname(prog)
    prog = os.path.basename(prog)
    if not here: here=os.getcwd()
    here = os.path.normpath(os.path.abspath(here))
    debug = os.environ.get('DEBUG','')=='1'

    #ensure scripts/.. is on the path
    sys.path.insert(0,os.path.dirname(here))
    if debug:
        print("sys.path[0]=%r\nsrcDir=%r" %(sys.path[0],srcDir))

    #replace quotes in json
    jsonqre = re.compile(r'"(\w+)":')
    #currently those used in athlib.utils.discipline_sort_key
    ngre = re.compile(r'\(\?P<[^>]+>')
    def discover():
        from athlib import codes
        for name in codes.__all__:
            value = getattr(codes,name)
            if hasattr(value,'pattern'):
                value = '/%s/' % ngre.sub('(',value.pattern) if ngre else value.pattern
            elif isinstance(value,(list,tuple)):
                value = json.dumps(value,indent=2,ensure_ascii=True)
            else:
                raise ValueError('Cannot deal with type %r' % value)
            yield name, value
        from athlib.utils import FIELD_EVENT_RECORDS_BY_GENDER as ferbg
        yield 'FIELD_EVENT_RECORDS_BY_GENDER', jsonqre.sub('\\1:',json.dumps(ferbg,indent=2,ensure_ascii=True))

    V = list(discover())
    if debug:
        print("V:\n%s" % ('\n'.join(('%s=%s' % i  for i in V))))

    with open(os.path.join(srcDir,'patterns.js'),'w') as f:
        f.write('// automatically generated by ../../scripts/make-patterns-js.py\n\n')
        f.write(''.join(('var %s = %s;\n' % i for i in V)))
        f.write('\nmodule.exports = {\n');
        f.write(',\n'.join(('  %s' % i[0] for i in V)))
        f.write('\n};\n')

    with open(os.path.join(srcDir,'athlib.js'),'r') as f:
        src = f.read()

    imp_text = '\nimport {\n%s\n} from "./patterns.js";\n' % ',\n'.join(('  %s' % i[0] for i in V))
    s = 'from "./patterns.js";\n'
    if s not in src:
        s = 'from "./highjump.js";\n'
        x = src.index(s)+len(s)
        src = src[:x] + imp_text+ src[x:]
    else:
        x = src.index(s)+len(s);
        y = src[:x].rindex('\nimport {\n')
        src = src[:y]+imp_text+src[x:]

    s = '  // start of patterns exports\n'
    exp_text = s + ''.join(('  %s,\n' % i[0] for i in V)) + '  // end of patterns exports\n'
    if s not in src:
        s = 'module.exports = {\n'
        x = src.index(s)+len(s)
        src = src[:x] + exp_text+ src[x:]
    else:
        x = src.index(s)
        s = '  // end of patterns exports\n'
        y = src.index(s)+len(s)
        src = src[:x] + exp_text + src[y:]

    with open(os.path.join(srcDir,'athlib.js'),'w') as f:
        f.write(src)

if __name__=='__main__':
    main()
