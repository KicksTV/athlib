#!/usr/bin/env python
def textWrapper(itext, texts, endText='}', endRemoveChars='\x20,', lim=80, wtext=4*'\x20'):
    L = [itext]
    w = len(itext)
    wtext = '\n' + wtext
    nwtext = len(wtext)
    for s in texts:
        ws = len(s)
        w += ws
        if w >= lim:
            while L[-1].endswith(' '): L[-1] = L[-1][:-1]
            s = wtext + s
            w = nwtext+ws
        L.append(s)
    while L[-1] and L[-1][-1] in endRemoveChars: L[-1] = L[-1][:-1]
    L[-1] += endText
    return ''.join(L)

def main():
    import os, sys, re, json, time
    prog = sys.argv[0]
    srcDir = os.path.normpath(os.path.abspath(sys.argv[1]))
    here = os.path.dirname(prog)
    prog = os.path.basename(prog)
    if not here: here=os.getcwd()
    here = os.path.normpath(os.path.abspath(here))
    debug = os.environ.get('DEBUG','')=='1'

    #ensure scripts/.. is on the path
    sys.path.insert(0,os.path.dirname(here))
    if debug:
        print("sys.path[0]=%r\nsrcDir=%r" %(sys.path[0],srcDir))

    #replace quotes in json
    jsonqre = re.compile(r'"(\w+)":')
    #currently those used in athlib.utils.discipline_sort_key
    ngre = re.compile(r'\(\?P<[^>]+>')
    def Q(s):
        return s.replace('"',"'")

    njsi = 2    #number of js spaces for indenting
    jsi = njsi*'\x20' #js indent

    lVars = []
    pVars = []
    md = []
    mp = {}
    def discover():
        from athlib import codes
        for name in codes.__all__:
            value = getattr(codes,name)
            if hasattr(value,'pattern'):
                mp[name] = pattern = value.pattern
                I = value.groupindex
                if I:
                    md.append(textWrapper('  %s: {' % name, (('%s: %s, ' % i) for i in I.items())))
                pVars.append((name, '/%s/' % ngre.sub('(',pattern) if ngre else pattern))
            elif isinstance(value,(list,tuple)):
                lVars.append((name, Q(json.dumps(value,indent=njsi,ensure_ascii=True))))
            else:
                raise ValueError('Cannot deal with type %r' % value)
        from athlib.utils import FIELD_EVENT_RECORDS_BY_GENDER as ferbg
        lVars.append(('FIELD_EVENT_RECORDS_BY_GENDER', jsonqre.sub('\\1:',Q(json.dumps(ferbg,indent=njsi,ensure_ascii=True)))))

    discover()
    V = lVars + pVars
    if debug:
        print("V:\n%s" % ('\n'.join(('%s=%s' % i  for i in V))))

    out = ['// automatically generated by ../../scripts/make-patterns-js.py %s\n' % time.asctime()].append
    out(''.join(('var %s = %s;\n' % i for i in V)))
    X = [i[0] for i in V]

    if md:
        X.append('codesmap')
        out('var __codesmap = {')
        out(',\n'.join(md))
        out('};')
        out(textWrapper('var __patObjs = [',('%s, ' % i[0] for i in sorted(pVars)),endText='];',wtext=jsi))
        out(textWrapper('var __patNames = [',('%r, ' % i[0] for i in sorted(pVars)),endText='];',wtext=jsi))
        out('''\nfunction codesmap(pattern, groupname, match) {
  var gx;

  if (typeof pattern === 'object') pattern = __patNames[__patObjs.indexOf(pattern)];
  gx = __codesmap[pattern];
  if (groupname == null) return gx;
  if (!gx) return null;
  gx = gx[groupname];
  if (gx == null) return null;
  gx = match[gx];
  return gx == null ? null : gx;
}''')
    out('\nmodule.exports = {');
    out(',\n'.join(('%s%s' % (jsi,i) for i in X)))
    out('};\n')

    with open(os.path.join(srcDir,'patterns.js'),'w') as f:
        f.write('\n'.join(out.__self__))

    with open(os.path.join(srcDir,'athlib.js'),'r') as f:
        src = f.read()

    imp_text = Q('\nimport {\n%s\n} from "./patterns.js";\n' % ',\n'.join(('%s%s' % (jsi,i) for i in X)))
    s = Q('from "./patterns.js";\n')
    if s not in src:
        s = Q('from "./highjump.js";\n')
        x = src.index(s)+len(s)
        src = src[:x] + imp_text+ src[x:]
    else:
        x = src.index(s)+len(s);
        y = src[:x].rindex('\nimport {\n')
        src = src[:y]+imp_text+src[x:]

    s = jsi+'// start of patterns exports\n'
    exp_text = s + ''.join(('%s%s,\n' % (jsi,i) for i in X)) + jsi+'// end of patterns exports\n'
    if s not in src:
        s = 'module.exports = {\n'
        x = src.index(s)+len(s)
        src = src[:x] + exp_text+ src[x:]
    else:
        x = src.index(s)
        s = jsi+'// end of patterns exports\n'
        y = src.index(s)+len(s)
        src = src[:x] + exp_text + src[y:]

    with open(os.path.join(srcDir,'athlib.js'),'w') as f:
        f.write(src)

if __name__=='__main__':
    main()
